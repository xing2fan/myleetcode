02.06.回文链表

题目：
编写一个函数，检查输入的链表是否是回文的。

 

示例 1：

输入： 1->2
输出： false
示例 2：

输入： 1->2->2->1
输出： true
 

进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？

分析：


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
	
       if(head == nullptr||head->next == nullptr)
	   {
           return true;
       }
	   
       ListNode*fast = head;
       ListNode*slow = head;
       ListNode*pre  = NULL;
	   
       while(fast&&fast->next)
	   {
           slow = slow->next;
           fast = fast->next->next;
       }
	   
	   //slow是中点，这里是第一个2，然后翻转反转后半部分链表

       while(slow)
	   {
           ListNode*tmp = slow->next;
		   
           slow->next = pre;
		   
           pre  = slow;
           slow = tmp;
       }
	   
       while(head && pre)
	   {
           if(head->val != pre->val)
		   {
               return false;
           }
		   
           head = head->next;
           pre  = pre->next;
       }
       return true;
    }
};

