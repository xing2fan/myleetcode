

递归版的先序遍历，对于每个遍历到的节点，看节点值是否比参数值(父节点值)大1，如果是则长度加1，
否则长度重置为1，然后更新结果 res，再递归调用左右子节点即可，参见代码如下：

求二叉树的最长连续序列的长度，要从父节点到子节点。最长连续子序列必须是从root到leaf的方向。 
比如 1->2，返回长度2， 比如1->3->4->5，返回3->4->5这个子序列的长度3。


解法：递归遍历binary tree，递归函数传入父节点的值，以帮助子节点判断是否连续。


class Solution {
public:
    int longestConsecutive(TreeNode* root) {
        if (!root) 
		{
			return 0;
		}
		
        int res = 0;
		
        dfs(root, root->val, 0, res);
		
        return res;
    }
	
    void dfs(TreeNode *root, int v, int out, int &res) 
	{
        if (!root) 
		{
			return;
		}
        if (root->val == v + 1) 
		{
			++out;
		}
        else 
		{
			out = 1;
		}
        res = max(res, out);
		
        dfs(root->left, root->val, out, res);
        dfs(root->right, root->val, out, res);
    }
};