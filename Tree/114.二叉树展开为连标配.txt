114. 二叉树展开为链表

解题思路：

这道题要求把二叉树展开成链表，根据展开后形成的链表的顺序分析出是使用后序遍历，那么只要是数的遍历就有递归和非递归的两种方法来求解，
这里我们也用两种方法来求解。

首先来看递归版本的，思路是先利用DFS的思路找到最左子节点，然后回到其父节点，把其父节点和右子节点断开，将原左子结点连上父节点的右子节点上，
然后再把原右子节点连到新右子节点的右子节点上，然后再回到上一父节点做相同操作。


需要更改结点左右指针的顺序，从根节点开始，结点的左孩子放到结点的右指针，
结点的右孩子放到左孩子最后指针后面；依次向下，直至整棵树变为链表

// Recursion
class Solution {
public:
    void flatten(TreeNode *root) {
        if (!root) 
		{
			return;
		}
        if (root->left)  
		{
			flatten(root->left);
		}
        if (root->right) 
		{
			flatten(root->right);
		}
		
        TreeNode *tmp = root->right;//1.记录右子树的值
		
		
        root->right   = root->left;//2.左子树挂到右子树上
        root->left    = NULL;//3.左孩子断开
		
        while (root->right) //寻找原左子树的最右结点
		{
			root = root->right;
		}
		
		//原右子树挂到最后节点后
        root->right = tmp;
    }
};




非迭代版本的实现，这个方法是从根节点开始出发，先检测其左子结点是否存在，如存在则将根节点和其右子节点断开，将左子结点及其后面所有结构一
起连到原右子节点的位置，把原右子节点连到原左子结点最后面的右子节点之后。

// Non-recursion
class Solution {
public:
    void flatten(TreeNode *root) {
        TreeNode *cur = root;
        while (cur) 
		{
            if (cur->left) 
			{
                TreeNode *p = cur->left;
                while (p->right) p = p->right;
                p->right = cur->right;
                cur->right = cur->left;
                cur->left = NULL;
            }
            cur = cur->right;
        }
    }
};