class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;

        res.push_back(binary_search_left(nums,target));
        res.push_back(binary_search_right(nums,target));
        return res;

    }

    int binary_search_left(vector<int> &nums,int target)
    {
        int left = 0;
        int right = nums.size()-1;
        while(left <= right)
        {
            int mid = left + (right - left)/2;

            if(nums[mid] < target)
            {
                left = mid + 1;
            }
            else if(nums[mid] > target)
            {
                right = mid - 1;
            }
            else if(nums[mid] == target)
            {
                right = mid - 1;
            }
        }
        //检查left越界情况 是>=
        if(left >= nums.size() || nums[left] != target)
        {
            return -1;
        }
        return left;
    }

    int binary_search_right(vector<int>& nums,int target)
    {
        int left = 0;
        int right = nums.size()-1;
        while(left <= right)
        {
            int mid = left + (right - left)/2;

            if(nums[mid] < target)
            {
                left = mid + 1;
            }
            else if(nums[mid] > target)
            {
                right = mid - 1;
            }
            else if(nums[mid] == target)
            {
                left = mid + 1;
            }
        }
        if(right < 0 || nums[right] != target)
        {
            return -1;
        }
        return right;
    }
};