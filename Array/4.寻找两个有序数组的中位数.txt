
中位数被用来：
将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。
这其中又分为偶数组和奇数组：
奇数组: [2 3 5] 对应的中位数为3
偶数组: [1 4 7 9] 对应的中位数为 (4 + 7) /2 = 5.5


先解释下“割”
我们通过切一刀，能够把有序数组分成左右两个部分，切的那一刀就被称为割(Cut)，割(Cut)的左右会有两个元素，分别是左边最大值和右边最小值。
我们定义LMax= Max(LeftPart)，RMin = Min(RightPart)。

割可以割在两个数中间，也可以割在1个数上，如果割在一个数上，那么这个数即属于左边，也属于右边

奇数组: [2 3 5] 对应的中位数为3，假定割(Cut)在3上，我们可以把3分为2个： [2 （3/3) 5]
因此LMax=3, RMin=3

偶数组: [1 4 7 9] 对应的中位数为 (4 + 7) /2 = 5.5,假定割(Cut)在4和7之间： [1 （4/7) 9]
因此LMax=4, RMin=7

割和第k个元素
一个数组
对于一个有序数组，对于数组A,如果在k的位置割(Cut)一下（不是割(Cut)在两数中间），那么 LMax = RMin = A[k],

两个数组
也就是我们题目的状态，我们要求得两个数组合并成一个有序数组时，第k位的元素

我们设:
Ci为第i个数组的割。

LMaxi为第i个数组割后的左元素.
RMini为第i个数组割后的右元素。

L =（N-1）/ 2，R为N / 2。 因此，中值可以表示为

(L + R)/2 = (A[(N-1)/2] + A[N/2])/2

=====================================================

#include <stdio.h>
#include <vector>
using namespace std;

#define max(a,b) (((a) > (b)) ? (a) : (b))
#define min(a,b) (((a) < (b)) ? (a) : (b))

class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		
		int n = nums1.size();
		int m = nums2.size();

		if (nums1.size() >  nums2.size())  //保证数组1一定最短
		{
			return findMedianSortedArrays(nums2, nums1);
		}

		// Ci 为第i个数组的割,比如C1为2时表示第1个数组只有2个元素。LMaxi为第i个数组割后的左元素。RMini为第i个数组割后的右元素。
		int LMax1;
        int LMax2;
        int RMin1;
        int RMin2;
        int c1;
        int c2;
        int lo = 0;
        int hi = 2 * n;  //我们目前是虚拟加了'#'所以数组1的长度是2*n长度

		while (lo <= hi)   //二分
		{
			c1 = (lo + hi) / 2;  //c1是二分的结果
			c2 = m + n - c1;

			LMax1 = (c1 == 0) ? INT_MIN : nums1[(c1 - 1) / 2];
			RMin1 = (c1 == 2 * n) ? INT_MAX : nums1[c1 / 2];
			LMax2 = (c2 == 0) ? INT_MIN : nums2[(c2 - 1) / 2];
			RMin2 = (c2 == 2 * m) ? INT_MAX : nums2[c2 / 2];

			if (LMax1 > RMin2)//?
			{
				hi = c1 - 1;
			}
			else if (LMax2 > RMin1)
			{
				lo = c1 + 1;
			}
			else
			{
				break;
			}
		}
		return (max(LMax1, LMax2) + min(RMin1, RMin2)) / 2.0;
	}
};

// lo = 0 hi=6 c1=3 c2=1  
int main(int argc, char *argv[])
{
	vector<int> nums1 = { 2,3, 5 };
	vector<int> nums2 = { 1,4,7, 9 };
	
	Solution solution;
	
	double ret = solution.findMedianSortedArrays(nums1, nums2);
	
	return 0;
}

